/*
 * generated by Xtext 2.16.0
 */
package org.php.ruler.generator

import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import com.google.inject.Inject

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.php.ruler.rule.RuleSet
import org.php.ruler.preferences.RuleOutputConfigurationProvider

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RuleGenerator extends AbstractGenerator {

    /**
     * Naming
     */
    @Inject extension IQualifiedNameProvider

    /**
     * Helper extensions for code generation
     */
    @Inject extension Utils
    @Inject extension RuleSetTrait
    @Inject extension RuleSetGenerator
    @Inject extension RuleRepositoryInterfaceGenerator

    override doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

        resource.addBasePackageTransformation

        val repositories = resource.allContents.filter(RuleSet).toIterable

        // Generate RuleSet for all repositories
        for (rs : repositories) {
            fsa.generateFile(
                rs.fullyQualifiedName.toString("/") + ".php",
                rs.doGenerateRuleSet(resource)
            )

            if (rs.hasActions) {
                fsa.generateFile(
                    rs.fullyQualifiedName.toString("/") + "Trait.php",
                    RuleOutputConfigurationProvider::GEN_ONCE_OUTPUT,
                    rs.doGenerateRuleSetTrait()
                )
            }
        }

        // Common Repository interface for all RuleSet classes
        val fqns = basePackageAsQualifiedName(resource)
        val path = fqns.append(
            RuleRepositoryInterfaceGenerator.interfaceName
        ).toString("/") + ".php"

        fsa.generateFile(path, doGenerate(fqns))
    }
}
